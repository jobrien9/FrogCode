#include <DS18B20.h>
#include <math.h>

//February 2023: This code is not for the Redbear any longer. It's been running on the Particle Photon since we lived in Columbus. 
//Attempting to update this to run pumps for the frog tank

//NOTE: This code had to be flashed to the device via the online IDE - there doesn't appear to be a way to 
//Firmware for a RedBear DUO board to control a 4 Relay Module, which turns the lights on a poison dart frog vivarium on and off
//JJ OBrien - Nov 2019

//sample API request to turn lights on: POST https://api.particle.io/v1/devices/[DeviceId]/toggleLight?access_token=[TOKEN]

//I'm not using the first relay module because it appears to be broken!
#define FISH_LIGHT_COLOR D2
#define PWM_PIN D1

#define THERMOMETER_PIN D6
#define MILLIS_PER_SAMPLE 10000
#define FADE_DOWN_INTERVAL 5000 //in milliseconds

//use this to divide really long times between polling and sunrise/set into more manageable numbers
#define LIGHT_TIMER_INTERVAL 60000 //60,000 milliseconds is one minute 

#define PUMP_PIN D7
#define MIST_PIN D0

//max mist time of 30 seconds
#define MAX_MIST_TIME_MS 30000

bool lightsOn = false;
bool frogLightsOn = false;
bool isMisting = false;
//global variable to track the latest temperature in F
float temperature = -900;

int brightness = 0;

//determines if we should fade up or down
bool fadeUp = false;

//how many LIGHT_TiMER_INTERVALS should pass before turning on/off the light
int cyclesBeforeLightEvent = 0;
int currentCycles = 0;
int lastMistDisableTime = 0;


void fader();
int changeBrightness(String newBrightness);
int fadeFish(String fadeDirection);
void toggleFishLightColor();
int setColor(String isBlue);
int toggleLight(String millisRemaining);
void lightSwitch();
int FrogLightToggleImmediate(String incoming);
int getCycleBeforeLightEvent(String incoming); //for debugging purposes
int mist(String seconds);
int stopMist(String incoming);
void stopMistInternal();
void togglePump();

DS18B20 ds18b20(THERMOMETER_PIN, true);
Timer timer(FADE_DOWN_INTERVAL, fader);
//wake up every X milliseconds and see if it's sunrise/sunset yet
Timer lightTimer(LIGHT_TIMER_INTERVAL, lightSwitch);

//timer for pump
Timer pumpTimer(100, stopMistInternal);


void setup() {
    Serial.begin(9600);
    //  pinMode(FROG_LIGHT_PIN1, OUTPUT);
    //  pinMode(FROG_LIGHT_PIN2, OUTPUT);
     pinMode(FISH_LIGHT_COLOR, OUTPUT);
     pinMode(THERMOMETER_PIN, INPUT);
     pinMode(PWM_PIN, OUTPUT);
     pinMode(MIST_PIN, OUTPUT);
     //start off by default
     digitalWrite(MIST_PIN, HIGH);
     //if HIGH, the lights will be off, if low, then on
    //  digitalWrite(FROG_LIGHT_PIN1, HIGH);
    //  digitalWrite(FROG_LIGHT_PIN2, HIGH);
     //this exposes the toggleLight function to the outside world
     Particle.function("toggleLight", toggleLight);
     Particle.function("getTemp", getTemp);
     Particle.function("isLightOn", isLightOn);
     Particle.function("getVivariumLightStatus", getVivariumLightStatus);
     Particle.function("changeBright", changeBrightness);
     Particle.function("fadeFish", fadeFish);
     Particle.function("setColor", setColor);
     Particle.function("frogToggle", FrogLightToggleImmediate);
     Particle.function("getCycles", getCycleBeforeLightEvent);
     Particle.function("stopMist", stopMist);
     
     //July 2020 Code for pump control
    Particle.function("mist", mist);
}

void loop() {
    Serial.println("loop");
    delay(MILLIS_PER_SAMPLE);
    
    float sampleTemp = ds18b20.getTemperature();
    if (sampleTemp > -900){
        temperature = convertToFahrenheit(sampleTemp);
    } else {
        //I want to make sure that old readings don't become stagnant if we get frequent bad readings
        temperature = -900;
    }

    //to prevent any possibility of a pump running uncontrolled, check that the current 
    // timestamp isn't more than the max mist time from the last mist time
    if (!isMisting || millis()-lastMistDisableTime > MAX_MIST_TIME_MS) {
        digitalWrite(MIST_PIN, HIGH);
        lastMistDisableTime= millis();
        isMisting = false;
    } 
}

//0 is light off, 1 is light on, 2 is twilight
int getVivariumLightStatus(String incoming){
    if (brightness == 0){
        return 0;
    } else{
        if (digitalRead(FISH_LIGHT_COLOR) == LOW){
            return 2;
        }
        return 1;
    }
}

int mist(String seconds) {
    int secondsToPump = atol(seconds);

    Particle.publish("Running pump for seconds: " + String(secondsToPump), PRIVATE);

    startMist();
    pumpTimer.changePeriod(secondsToPump * 1000);
    pumpTimer.start();

    return secondsToPump;
}

int stopMist(String incoming) {
    pumpTimer.stop();
    stopMistInternal();
    return 1;
}

void stopMistInternal() {
    Particle.publish("Mist Stop!", PRIVATE);
    digitalWrite(MIST_PIN, HIGH);
}


void startMist(){
    Particle.publish("Starting Misting", PRIVATE);
    isMisting = true;
    digitalWrite(MIST_PIN, LOW);
    Particle.publish("Mist Pin: " + String(digitalRead(MIST_PIN)), PRIVATE);
}

//toggles the lights (by controlling the relay) 
int toggleLight(String millisRemaining) {
    //Serial.println("toggle");
    int lightTimerInterval = atol(millisRemaining);
    lightTimerInterval = lightTimerInterval > 0 ? lightTimerInterval : 0;
    
    Particle.publish("Timer Interval:", "Timer INterval: " + String(lightTimerInterval), PRIVATE);

    //lightTimer.changePeriod(lightTimerInterval);
    cyclesBeforeLightEvent = lightTimerInterval/(int)LIGHT_TIMER_INTERVAL;
    currentCycles = 0;
    lightTimer.start();

    //return the status of the lights 
    return cyclesBeforeLightEvent;
}

//turns the lights on or off when the timer dictates
void lightSwitch() {
    //Serial.println("here");
    Particle.publish("lightSwitch", "Current Cycles: " + String(currentCycles) + " Cycles Before Light Event: " + String(cyclesBeforeLightEvent), PRIVATE);
    if (++currentCycles >= cyclesBeforeLightEvent){
        currentCycles = 0;
        lightTimer.stop();
        if (lightsOn){
            // digitalWrite(FROG_LIGHT_PIN1, HIGH);
            // digitalWrite(FROG_LIGHT_PIN2, HIGH);
            //start the fade down
            fadeFish("0");
        }else{
            // digitalWrite(FROG_LIGHT_PIN1, LOW);
            // digitalWrite(FROG_LIGHT_PIN2, LOW);
            //start the fade up
            fadeFish("1");
        }
        
        lightsOn = !lightsOn;
        frogLightsOn = !frogLightsOn;
    }
}



//returns the temperature in Fahrenheit
int getTemp(String incoming){
    return round(temperature);
}

//1 if true, 0 if false
int isLightOn(String incoming){
    return (int)frogLightsOn;
}


//helper function to convert to Fahrenheit
float convertToFahrenheit(float celsius){
    return (celsius * 1.8) + 32;
}

//function to set brightness on fish tank
int changeBrightness(String newBrightness) {
    timer.stop();
    brightness = newBrightness.toInt();
    Particle.publish("New Brightness: " + String(brightness), PRIVATE);
    //set the brightness of the fish tank - 80Hz was chosen based on trial and error (not flickering but also responsive)
    analogWrite(PWM_PIN, brightness, 80);
    return brightness;
}

//function to fade vivarium up or down slowly (used to be used for fish tank)
int fadeFish(String fadeDirection){
    if (fadeDirection.toInt() == 1){
        fadeUp = true;
        //make sure the light color is white
        setColor("0");
    }else {
        fadeUp = false;
    }
    
    //timer.stop(); // stop any timers that are currently running
    timer.start();
    return fadeDirection.toInt();
}

void fader(){
    if (fadeUp){
        brightness++;
        if (brightness == 255) {
            timer.stop();
        }
    } else {
        brightness--;
        if (brightness == 50) {
            timer.stop();
            //turn to blue light before it completely fades down to simulate dusk
            setColor("1");
        }
    }
    
    analogWrite(PWM_PIN, brightness, 80);
    
    //Serial.println(brightness);
}

//if the user passes in a one, then set the light to blue
int setColor(String isBlue){
    if (isBlue.toInt() == 1) {
        digitalWrite(FISH_LIGHT_COLOR, LOW);
    } else{
        digitalWrite(FISH_LIGHT_COLOR, HIGH);
    }
    
    return isBlue.toInt();
}

//function to be used when I want to toggle only the Frog Lights
int FrogLightToggleImmediate(String incoming){
    // if (frogLightsOn){
    //     digitalWrite(FROG_LIGHT_PIN1, HIGH);
    //     digitalWrite(FROG_LIGHT_PIN2, HIGH);
    // }else{
    //     digitalWrite(FROG_LIGHT_PIN1, LOW);
    //     digitalWrite(FROG_LIGHT_PIN2, LOW);
    // }
    
    frogLightsOn = !frogLightsOn;
    return frogLightsOn;
}

int getCycleBeforeLightEvent(String incoming){
    return cyclesBeforeLightEvent;
}